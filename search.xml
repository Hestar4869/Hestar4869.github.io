<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Hello World</title>
    <url>/2022/02/24/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>
]]></content>
  </entry>
  <entry>
    <title>post</title>
    <url>/2022/02/27/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/%E6%A6%82%E8%BF%B0/</url>
    <content><![CDATA[<h2 id="1-互联网的组成"><a href="#1-互联网的组成" class="headerlink" title="1. 互联网的组成"></a>1. 互联网的组成</h2><p>互联网的拓扑结构虽然非常复杂，但从其工作方式上看，可以划分为以下两大块：</p>
<ul>
<li><strong>边缘部分</strong>：由所有连接在互联网上的主机组成。这部分是<strong>用户直接使用的</strong>，用来进行通信（传送数据、音频或视频）和资源共享</li>
<li><strong>核心部分</strong>：由大量网络和连接这些网络的路由器组成。这部分是为<strong>边缘部分提供服务的</strong>（提供连通性和交换）</li>
</ul>
<h3 id="1-1-互联网的边缘部分"><a href="#1-1-互联网的边缘部分" class="headerlink" title="1.1 互联网的边缘部分"></a>1.1 互联网的边缘部分</h3><p>处在互联网边缘的部分就是连接在互联网上的所有主机。这些主机又称为<strong>端系统(end system)<strong>。端系统的拥有者可以是个人，也可以是单位（如学校，企业，政府机关等），也可以是某个ISP（即ISP不仅仅是向端系统提供服务，它也可以拥有一些端系统）。边缘部分利用核心部分所提供的服务，使众多主机之间的能够互相</strong>通信</strong>并交换或共享信息。</p>
<p><strong>计算机间的通信</strong>，通常指：“运行在主机A上的某个程序和运行在主机B上的另一个程序进行通信”。由于“进程”就是“运行着的程序”，也就是说：<strong>“主机A上的某个进程和主机B上的另一个进程进行通信”</strong>。通信方式通常可以划分为两大类：<strong>客户&#x2F;服务器方式（C&#x2F;S方式）</strong> 和 <strong>对等方式（P2P方式）</strong>。</p>
<h3 id="1-2-互联网核心部分"><a href="#1-2-互联网核心部分" class="headerlink" title="1.2 互联网核心部分"></a>1.2 互联网核心部分</h3><p>核心部分的功能是：向网络边缘部分的大量主机提供<strong>连通性</strong>，使<strong>边缘部分中的任何一台主机都能与其他主机通信</strong>。</p>
<p>在网络核心部分起特殊作用的是<strong>路由器(router)<strong>，它是一种专用计算机（但不叫做主机）。路由器是实现</strong>分组交换(packet switching)<strong>的关键构件，其任务是</strong>转发收到的分组</strong>。下面介绍三种交换方式。</p>
<h4 id="1-2-1-电路交换"><a href="#1-2-1-电路交换" class="headerlink" title="1.2.1 电路交换"></a>1.2.1 电路交换</h4><p><img src="/2022/02/27/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/%E6%A6%82%E8%BF%B0/2022-02-27-13-52-49.png" alt="电路交换"><br>在使用电路交换通话之前，必须先拨号请求建立连接。当被叫用户听到交换机送来的振铃音并摘机后，才能建立一条连接，也就是一条<strong>专用的物理通路</strong>。通话完毕挂机后，交换机释放刚才使用的这条专用物理通路。所以<strong>电路交换</strong>的流程为：</p>
<p><strong>建立连接</strong>（占用通信资源） $\Longrightarrow$ <strong>通话</strong>（一直占用通信资源） $\Longrightarrow$ <strong>释放连接</strong>（归还通信资源）</p>
<p>特点：<strong>在通话的全部时间内，通话的两个用户始终占用端到端的通信资源</strong></p>
<p>缺点：<strong>线路的传输效率很低</strong>。这是因为计算机数据是突发式的出现在传输线路上的，<strong>真正用来传输数据的时间反而很少</strong>，已被用户占用的通信线路资源在大部分时间里是空闲的。例如，当用户阅读终端屏幕上的信息或用键盘输入和编辑一份文件时，或计算机正在处理而尚未返回结果时，宝贵的通信线路资源并未被利用而是被浪费了。</p>
<h4 id="1-2-2-报文交换"><a href="#1-2-2-报文交换" class="headerlink" title="1.2.2 报文交换"></a>1.2.2 报文交换</h4><p>报文交换是以<strong>报文</strong>为数据交换的单位，报文携带有目标地址、源地址等信息，在交换结点采用<strong>存储转发</strong>的传输方式。</p>
<ul>
<li><strong>无须建立连接</strong>。报文交换不需要为通信双方预先建立一条专用的通信线路，不存在建立连接时延，用户可以随时发送报文。</li>
<li><strong>动态分配线路</strong>。当发送方把报文交给交换设备时，交换设备先存储整个报文，然后选择一条合适的空闲线路，将报文发送出去。</li>
</ul>
<h4 id="1-2-3-分组交换"><a href="#1-2-3-分组交换" class="headerlink" title="1.2.3 分组交换"></a>1.2.3 分组交换</h4>]]></content>
      <categories>
        <category>计算机网络</category>
      </categories>
  </entry>
  <entry>
    <title>Python基础知识</title>
    <url>/2022/02/26/Python/Python%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/</url>
    <content><![CDATA[<h2 id="基本数据类型"><a href="#基本数据类型" class="headerlink" title="基本数据类型"></a>基本数据类型</h2><h3 id="1-1-整型"><a href="#1-1-整型" class="headerlink" title="1.1 整型"></a>1.1 整型</h3><p>如<code>1</code>，<code>424</code>，<code>3344</code>等</p>
<h3 id="1-2-浮点型"><a href="#1-2-浮点型" class="headerlink" title="1.2 浮点型"></a>1.2 浮点型</h3><p>如<code>1.24</code>，<code>3.333</code>，<code>2.0</code></p>
<h3 id="1-3-字符串型"><a href="#1-3-字符串型" class="headerlink" title="1.3 字符串型"></a>1.3 字符串型</h3><p>如<code>&quot;abc&quot;</code>，<code>&quot;Chinese&quot;</code>，<code>&quot;字符串&quot;</code>等。<br><strong>浮点数间运算存在不确定尾数</strong>，可使用<code>round(x,d)</code>:对<code>x</code>四舍五入，<code>d</code>是小数截取位数</p>
<h4 id="1-3-1-索引"><a href="#1-3-1-索引" class="headerlink" title="1.3.1 索引"></a>1.3.1 索引</h4><p>对于字符串，Python 中有两种索引体系，<strong>正向递增序号</strong>和<strong>反向递增序号</strong><br><img src="/2022/02/26/Python/Python%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/2022-02-26-17-02-05.PNG" alt="两种索引体系"></p>
<h4 id="1-3-2-字符串的使用"><a href="#1-3-2-字符串的使用" class="headerlink" title="1.3.2 字符串的使用"></a>1.3.2 字符串的使用</h4><ul>
<li><p><strong>索引</strong>：返回字符串中单个字符 <code>&lt;字符串&gt;[M]</code></p>
</li>
<li><p><strong>切片</strong> ：返回字符串中一段字符子串 <code>&lt;字符串&gt;[M:N]</code></p>
</li>
</ul>
<h4 id="1-3-3-字符串操作符"><a href="#1-3-3-字符串操作符" class="headerlink" title="1.3.3 字符串操作符"></a>1.3.3 字符串操作符</h4><table>
<thead>
<tr>
<th>表达式</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>x+y</td>
<td>连接两个字符串 x 和 y</td>
</tr>
<tr>
<td>n*x 或 x*n</td>
<td>复制 n 次字符串 x</td>
</tr>
<tr>
<td>x in s</td>
<td>如果 x 是 s 的字串，返回 true，否则返回 false</td>
</tr>
</tbody></table>
<h3 id="1-4-列表类型"><a href="#1-4-列表类型" class="headerlink" title="1.4 列表类型"></a>1.4 列表类型</h3><ul>
<li>列表使用[ ]表示，才用逗号( , )分隔各元素。<code>[&#39;F&#39;,&#39;F&#39;]</code>表示两个元素</li>
<li>使用保留字<code>in</code>判断一个字符是否在列表中</li>
</ul>
<h2 id="输入输出"><a href="#输入输出" class="headerlink" title="输入输出"></a>输入输出</h2><h3 id="2-1-输入函数-input"><a href="#2-1-输入函数-input" class="headerlink" title="2.1 输入函数 input"></a>2.1 输入函数 input</h3><p>作用是从控制台获得用户输入的函数</p>
<ul>
<li><p>input()的使用格式： <code>&lt;变量&gt; = input(&lt;提示信息字符串&gt;)</code></p>
</li>
<li><p>用户输入的信息以字符串类型保存在&lt;变量&gt;中</p>
</li>
</ul>
<h3 id="2-2-输出函数-print"><a href="#2-2-输出函数-print" class="headerlink" title="2.2 输出函数 print"></a>2.2 输出函数 print</h3><p>作用是以字符形式向控制台输出结果的函数</p>
<ul>
<li>print()函数的基本使用格式： <code>print(&lt;拟输出的字符串或字符串变量&gt;)</code></li>
<li>print()函数的<strong>格式化</strong>：<code>print(&quot;转换后的温度是&#123;:.2f&#125;℃&quot;.format(x))</code><br><code>&#123;&#125;</code>表示槽，后续变量填充到槽中<br><code>&#123;:.2f&#125;</code>表示将变量<code>x</code>填充到这个位置时取小数点后 2 位</li>
</ul>
]]></content>
      <categories>
        <category>Python</category>
      </categories>
  </entry>
  <entry>
    <title>turtle库的简单使用</title>
    <url>/2022/02/26/Python/turtle%E5%BA%93%E7%9A%84%E7%AE%80%E5%8D%95%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<h2 id="turtle库基本介绍"><a href="#turtle库基本介绍" class="headerlink" title="turtle库基本介绍"></a>turtle库基本介绍</h2><p>turtle库是turtle绘图体系的python实现。<br>可以将turtle理解为一直”海龟”，它在窗体的正中心，在画布上游走，走过的轨迹形成了绘制的图形。”海龟”由程序控制，可以变换颜色，该改变宽度等。</p>
<h2 id="turtle绘图窗体布局"><a href="#turtle绘图窗体布局" class="headerlink" title="turtle绘图窗体布局"></a>turtle绘图窗体布局</h2><p>整个windows桌面窗口是一个窗体，桌面的左上角的坐标为<code>(0,0)</code>，turtle绘图的窗体是另一个窗体，左上角坐标为<code>(startx,starty)</code><br><img src="/2022/02/26/Python/turtle%E5%BA%93%E7%9A%84%E7%AE%80%E5%8D%95%E4%BD%BF%E7%94%A8/2022-02-26-19-05-55.png" alt="turtle的绘图窗体"></p>
<p>我们使用<code>turle.setup(width,height,startx,starty)</code>来设置窗体大小以及位置，若<code>startx</code>和<code>starty</code>参数未指定，则默认居中。</p>
<h2 id="turtle运动控制函数"><a href="#turtle运动控制函数" class="headerlink" title="turtle运动控制函数"></a>turtle运动控制函数</h2><h3 id="3-1-turtle空间坐标体系"><a href="#3-1-turtle空间坐标体系" class="headerlink" title="3.1 turtle空间坐标体系"></a>3.1 turtle空间坐标体系</h3><h4 id="3-1-1-绝对坐标"><a href="#3-1-1-绝对坐标" class="headerlink" title="3.1.1 绝对坐标"></a>3.1.1 绝对坐标</h4><p>相应的可使用<code>turtle.goto()</code>函数来控制<code>turtle</code>的移动方向，移动时的坐标为<strong>绝对坐标</strong><br><img src="/2022/02/26/Python/turtle%E5%BA%93%E7%9A%84%E7%AE%80%E5%8D%95%E4%BD%BF%E7%94%A8/2022-02-26-19-11-17.png" alt="绝对坐标"></p>
<h4 id="3-1-2-海龟坐标"><a href="#3-1-2-海龟坐标" class="headerlink" title="3.1.2 海龟坐标"></a>3.1.2 海龟坐标</h4><p>以海龟当前所在位置作为坐标轴。有<code>turtle.circle()</code>，<code>turtle.bk()</code>，<code>turtle.fd()</code>三个函数控制海龟移动<br><img src="/2022/02/26/Python/turtle%E5%BA%93%E7%9A%84%E7%AE%80%E5%8D%95%E4%BD%BF%E7%94%A8/2022-02-26-19-16-24.png" alt="相对坐标"></p>
<h3 id="3-2-turtle角度坐标体系"><a href="#3-2-turtle角度坐标体系" class="headerlink" title="3.2 turtle角度坐标体系"></a>3.2 turtle角度坐标体系</h3><h3 id="3-2-1-绝对角度"><a href="#3-2-1-绝对角度" class="headerlink" title="3.2.1 绝对角度"></a>3.2.1 绝对角度</h3><p>可用<code>turtle.set(angle)</code>改变海龟行进方向，<code>angele</code>为绝对角度。<code>seth()</code>仅改变方向但不行进</p>
<p><img src="/2022/02/26/Python/turtle%E5%BA%93%E7%9A%84%E7%AE%80%E5%8D%95%E4%BD%BF%E7%94%A8/2022-02-26-19-20-48.png" alt="绝对角度"></p>
<h3 id="3-2-2-海龟角度"><a href="#3-2-2-海龟角度" class="headerlink" title="3.2.2 海龟角度"></a>3.2.2 海龟角度</h3><p><img src="/2022/02/26/Python/turtle%E5%BA%93%E7%9A%84%E7%AE%80%E5%8D%95%E4%BD%BF%E7%94%A8/2022-02-26-19-23-35.png" alt="海龟角度"></p>
<h2 id="turtle画笔控制函数"><a href="#turtle画笔控制函数" class="headerlink" title="turtle画笔控制函数"></a>turtle画笔控制函数</h2><ul>
<li><code>turtle.penup()</code>:画笔抬起</li>
<li><code>turtle.pendown()</code>:画笔放下，与<code>penup()</code>成对出现</li>
<li><code>turtle.pensize()</code>:画笔宽度</li>
</ul>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ul>
<li>turtle库的海龟绘图法</li>
<li>turtle.setup()调整绘图窗体在电脑屏幕中的布局</li>
<li>画布上以中心为原点的空间坐标系：绝对坐标&amp;海龟坐标</li>
<li>画布上以空间x轴为0度的角度坐标系：绝对角度&amp;海龟角度</li>
</ul>
]]></content>
      <categories>
        <category>Python</category>
      </categories>
  </entry>
  <entry>
    <title>Java:基础知识</title>
    <url>/2022/02/26/Java/Java-%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/</url>
    <content><![CDATA[<h2 id="Java的三个版本"><a href="#Java的三个版本" class="headerlink" title="Java的三个版本"></a>Java的三个版本</h2><p>在多年的发展中，java的应用产生了三个开发版本：</p>
<ol>
<li>JavaSE: Java Standard Edition，Java技术标准版，以界面程序，Java小程序和其它一些典型的应用为目标。</li>
<li>JavaEE: Java Enterprise Edition，Java技术企业版，以服务器端程序和企业软件的开发为目标。</li>
<li>JavaME: Java Micro Edition，Java技术微型版，为小型设备，独立设备，互联移动设备，嵌入式设备程序开发而设计。</li>
</ol>
<p>我们常用的是JavaSE</p>
<h2 id="JVM、JRE、JDK的区别"><a href="#JVM、JRE、JDK的区别" class="headerlink" title="JVM、JRE、JDK的区别"></a>JVM、JRE、JDK的区别</h2><ul>
<li>JVM: Java Virtual Machine，即Java虚拟机。</li>
<li>JRE: Java Runtime Environment，指Java运行环境。JRE包括JVM和Java核心类库。</li>
<li>JDK: Java Development Kit，指Java开发工具包，包括JRE和Java开发工具（javac.exe&#x2F;jar.exe）。</li>
</ul>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
  </entry>
  <entry>
    <title>post</title>
    <url>/2022/03/01/JavaWeb/Javascript%E5%9F%BA%E7%A1%80/</url>
    <content><![CDATA[<p>简单介绍一下JavaScript内置对象，使用最多的有以下4个：</p>
<ol>
<li><strong>window:</strong> 负责操作浏览器窗口，负责窗口的状态、开&#x2F;闭合。</li>
<li><strong>document</strong>：负责操作浏览器载入的文档（html文件），从属window。</li>
<li><strong>history</strong>：可以代替后退（前进）按钮访问历史记录，从属window。</li>
<li><strong>location</strong>：访问地址栏，也从属window。<h2 id="1-window对象"><a href="#1-window对象" class="headerlink" title="1. window对象"></a>1. window对象</h2>window对象作用如下。</li>
</ol>
<h3 id="1-1-出现提示框"><a href="#1-1-出现提示框" class="headerlink" title="1.1 出现提示框"></a>1.1 出现提示框</h3><p>window对象可以跳出提示框。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">window</span>.<span class="title function_">alert</span>(<span class="string">&quot;内容&quot;</span>)：出现消息框</span><br><span class="line"><span class="variable language_">window</span>.<span class="title function_">confirm</span>(<span class="string">&quot;内容&quot;</span>)：出现确认框</span><br><span class="line"><span class="variable language_">window</span>.<span class="title function_">prompt</span>(<span class="string">&quot;内容&quot;</span>):出现输入框</span><br></pre></td></tr></table></figure>
<p><strong>实例：</strong></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//消息框</span></span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">window</span>.<span class="title function_">alert</span>(<span class="string">&quot;我是消息框&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//确认框</span></span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">window</span>.<span class="title function_">confirm</span>(<span class="string">&quot;你确认要确认吗？&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//输入框</span></span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">window</span>.<span class="title function_">prompt</span>(<span class="string">&quot;麻烦输入一下&quot;</span>);</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p><strong>结果：</strong></p>
<p><img src="/2022/03/01/JavaWeb/Javascript%E5%9F%BA%E7%A1%80/2022-03-01-20-37-17.png" alt="消息框"></p>
<p><img src="/2022/03/01/JavaWeb/Javascript%E5%9F%BA%E7%A1%80/2022-03-01-20-41-43.png" alt="确认框"></p>
<p><img src="/2022/03/01/JavaWeb/Javascript%E5%9F%BA%E7%A1%80/2022-03-01-20-42-03.png" alt="输入框"></p>
<h3 id="1-2-打卡、关闭窗口"><a href="#1-2-打卡、关闭窗口" class="headerlink" title="1.2 打卡、关闭窗口"></a>1.2 打卡、关闭窗口</h3><p>window对象还用于控制窗口的状态和开&#x2F;关。打开窗口使用<code>window.open()</code>函数，关闭窗口使用<code>window.close()</code>，控制窗口状态可以设置改变<code>window.statue</code>属性。</p>
<h3 id="1-3-定时器"><a href="#1-3-定时器" class="headerlink" title="1.3 定时器"></a>1.3 定时器</h3><p>window对象负责管理和控制页面的定时器，定时器的作用是让某个函数隔一段时间之后运行一次，格式如下。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">timer=<span class="variable language_">window</span>.<span class="built_in">setTimeout</span>(<span class="string">&quot;需要运行的函数&quot;</span>,<span class="string">&quot;时间（毫秒计）&quot;</span>);</span><br><span class="line"><span class="variable language_">window</span>.<span class="built_in">clearTimeout</span>(timer);<span class="comment">//清楚定时器</span></span><br></pre></td></tr></table></figure>
<h2 id="2-history对象"><a href="#2-history对象" class="headerlink" title="2. history对象"></a>2. history对象</h2><p>history对象包含用户的浏览历史等信息，使用这个对象是因为它可以代替前进（后退）按钮访问历史记录，该对象从属window。</p>
<p>常用的函数如下。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">history.<span class="title function_">back</span>():返回上一页，相当于单击浏览器上的后退按钮。</span><br><span class="line">history.<span class="title function_">forward</span>():返回下一页，相当于单击浏览器上的前进按钮。</span><br><span class="line"><span class="variable language_">window</span>.<span class="property">history</span>.<span class="title function_">go</span>(n):n为整数，正数表示向前前进n格页面，负数表示后退。</span><br></pre></td></tr></table></figure>
<h2 id="3-document对象"><a href="#3-document对象" class="headerlink" title="3. document对象"></a>3. document对象</h2><p>document对象同样从属window，功能如下。</p>
<h3 id="3-1-在网页上输出"><a href="#3-1-在网页上输出" class="headerlink" title="3.1 在网页上输出"></a>3.1 在网页上输出</h3><p>在网页输出方面，最常见的函数是<code>writeln()</code>。</p>
<h3 id="3-2-设置网页的属性"><a href="#3-2-设置网页的属性" class="headerlink" title="3.2 设置网页的属性"></a>3.2 设置网页的属性</h3><p>使用document对象可以进行一些简单网页属性的设置，例如页面的标题、颜色等，并且可以得到网页的某些属性，例如地址。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">document</span>.<span class="property">title</span>:获取当前网页标题</span><br><span class="line"><span class="variable language_">document</span>.<span class="property">location</span>:获取当前网页的地址</span><br></pre></td></tr></table></figure>
<h3 id="3-3-访问文档元素，特别是表单元素"><a href="#3-3-访问文档元素，特别是表单元素" class="headerlink" title="3.3 访问文档元素，特别是表单元素"></a>3.3 访问文档元素，特别是表单元素</h3><p>使用document对象可以访问文档中的元素（例如图片、表单、表单中的控件），前提是元素的name属性是确定的。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">name</span>=<span class="string">&quot;form1&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">name</span>=<span class="string">&quot;txt1&quot;</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    text=<span class="variable language_">document</span>.<span class="property">form1</span>.<span class="property">txt1</span>.<span class="property">value</span>;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="4-location对象"><a href="#4-location对象" class="headerlink" title="4. location对象"></a>4. location对象</h2><p>location对象可以访问浏览器的地址栏，它也从属window，其最常见的功能就是转到另一个网页，跳转方法是修改location对象的href属性。</p>
]]></content>
      <categories>
        <category>JavaWeb</category>
      </categories>
  </entry>
</search>
